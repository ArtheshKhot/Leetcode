Problem Description:
    Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]

Approach:
Recursion

C++ code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:

   int SearchInorder(vector<int>inorder,int element,int n){

       for(int i=0;i<n;i++){
           if(inorder[i] == element){
               return i;
           }
       }

       return -1;
   }

   TreeNode* Solve(vector<int>preorder,vector<int>inorder,int &preIndex,int InStart,int InEnd,int n){

       if(preIndex > n || InStart > InEnd){
           return NULL;
       }

       int element = preorder[preIndex++];
       TreeNode* root = new TreeNode(element);

       int position = SearchInorder(inorder,element,n);

       root -> left = Solve(preorder,inorder,preIndex,InStart,position -1,n);
       root -> right = Solve(preorder,inorder,preIndex,position+1,InEnd,n);

       return root;
   }

public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        int preIndex = 0;
        int n = inorder.size();

        TreeNode* ans = Solve(preorder,inorder,preIndex,0,n-1,n);

        return ans;

    }
};